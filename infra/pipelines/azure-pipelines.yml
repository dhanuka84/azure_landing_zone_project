trigger:
  branches: { include: [ main ] }
  paths: { include: [ infra/** ] }

variables:
- group: vg-terraform

# Define the OIDC-based service connection names
# These connections are configured in Azure DevOps with "Workload Identity federation"
variables:
  SERVICE_CONNECTION_PLATFORM: "azrm-oidc-platform"
  SERVICE_CONNECTION_NONPROD: "azrm-oidc-nonprod"
  SERVICE_CONNECTION_PROD: "azrm-oidc-prod"

stages:
- stage: platform_mg
  displayName: "Platform :: Management Groups & Policy"
  jobs:
  - job: tf
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.13.4' # <-- LATEST TF VERSION
    - task: TerraformCLI@1
      displayName: "Init (MG)"
      inputs:
        command: 'init'
        workingDirectory: 'infra/platform/mg'
        backendType: 'azurerm'
        # OIDC is enabled on the provider, init uses the service connection for backend access
        serviceConnection: $(SERVICE_CONNECTION_PLATFORM) 
        ensureBackend: true
        backendAzureRmResourceGroupName: '$(TF_STATE_RG)'
        backendAzureRmStorageAccountName: '$(TF_STATE_SA)'
        backendAzureRmContainerName: '$(TF_STATE_CONTAINER)'
        backendAzureRmKey: '$(TF_STATE_KEY_PLATFORM_MG)'
    - task: TerraformCLI@1
      displayName: "Validate (MG)"
      inputs:
        command: 'validate'
        workingDirectory: 'infra/platform/mg'
    - task: TerraformCLI@1
      displayName: "Plan (MG)"
      inputs:
        command: 'plan'
        workingDirectory: 'infra/platform/mg'
        serviceConnection: $(SERVICE_CONNECTION_PLATFORM)
        commandOptions: '-out=tfplan'
    - task: TerraformCLI@1
      displayName: "Apply (MG)"
      inputs:
        command: 'apply'
        workingDirectory: 'infra/platform/mg'
        serviceConnection: $(SERVICE_CONNECTION_PLATFORM)
        commandOptions: 'tfplan'

- stage: platform_connectivity
  displayName: "Platform :: Connectivity (Hub VNet + Firewall + NSGs)"
  dependsOn: platform_mg
  jobs:
  - job: tf
    pool: { vmImage: 'ubuntu-latest' }
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.13.4' # <-- LATEST TF VERSION
    - task: TerraformCLI@1
      displayName: "Init (Connectivity)"
      inputs:
        command: 'init'
        workingDirectory: 'infra/platform/connectivity'
        backendType: 'azurerm'
        serviceConnection: $(SERVICE_CONNECTION_PLATFORM)
        ensureBackend: true
        backendAzureRmResourceGroupName: '$(TF_STATE_RG)'
        backendAzureRmStorageAccountName: '$(TF_STATE_SA)'
        backendAzureRmContainerName: '$(TF_STATE_CONTAINER)'
        backendAzureRmKey: '$(TF_STATE_KEY_CONNECTIVITY)'
    - task: TerraformCLI@1
      displayName: "Plan (Connectivity)"
      inputs:
        command: 'plan'
        workingDirectory: 'infra/platform/connectivity'
        serviceConnection: $(SERVICE_CONNECTION_PLATFORM)
        commandOptions: '-var-file=hub.tfvars -out=tfplan'
    - task: TerraformCLI@1
      displayName: "Apply (Connectivity)"
      inputs:
        command: 'apply'
        workingDirectory: 'infra/platform/connectivity'
        serviceConnection: $(SERVICE_CONNECTION_PLATFORM)
        commandOptions: 'tfplan'

# ... (Stages for dev, qa, prod are updated similarly, using
#      terraformVersion: '1.13.4'
#      serviceConnection: $(SERVICE_CONNECTION_NONPROD) or
#      serviceConnection: $(SERVICE_CONNECTION_PROD)
#      and removing environmentServiceName)